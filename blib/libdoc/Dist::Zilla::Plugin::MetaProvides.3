.\" Automatically generated by Pod::Man 2.26 (Pod::Simple 3.22)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Dist::Zilla::Plugin::MetaProvides 3"
.TH Dist::Zilla::Plugin::MetaProvides 3 "2012-07-27" "perl v5.16.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dist::Zilla::Plugin::MetaProvides \- Generating and Populating 'provides' in your META.yml
.SH "VERSION"
.IX Header "VERSION"
version 1.14000001
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
In your projects dist.ini
.PP
.Vb 4
\&    [MetaProvides::Class]
\&    inherit_version = 0    ;optional flag
\&    inherit_missing = 0    ;optional flag
\&    meta_noindex    = 1    ;optional flag
\&
\&    [MetaProvides::Package]
\&    inherit_version = 0    ;optional flag
\&    inherit_missing = 0    ;optional flag
\&    meta_noindex    = 1    ;optional flag
\&
\&    [MetaProvides::FromFile]
\&    inherit_version = 0     ;optional flag
\&    inherit_missing = 0     ;optional flag
\&    file = some_file.ini    ;mandatory flag
\&    reader_name = Config::INI::Reader ;optional flag
\&    meta_noindex    = 1     ;optional and useless flag
.Ve
.PP
And then in some_file.ini
.PP
.Vb 3
\&    [Imaginary::Package]
\&    file = lib/Imaginary/Package.pm ;mandatory flag
\&    version = 3.1415                ;optional flag, subject to rules in dist.ini
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This Distribution Contains a small bundle of plugins for various ways of
populating the \f(CW\*(C`META.yml\*(C'\fR that is built with your distribution.
.PP
The initial reason for this is due to stuff that uses MooseX::Declare
style class definitions not being parseable by many tools upstream, so this
is here to cover this problem by defining it in the metadata.
.SH "COMPONENT SUMMARY"
.IX Header "COMPONENT SUMMARY"
.SS "::Class"
.IX Subsection "::Class"
Scans Dist::Zilla's \f(CW\*(C`.pm\*(C'\fR files and tries to identify classes using
Class::Discover.
.PP
Dist::Zilla::Plugin::MetaProvides::Class
.SS "::Package"
.IX Subsection "::Package"
Scans Dist::Zilla's \f(CW\*(C`.pm\*(C'\fR files and tries to identify more traditional
packages using a combination of Module::Extract::VERSION and
Module::Extact::Namespaces.
.PP
Dist::Zilla::Plugin::MetaProvides::Package
.SS "::FromFile"
.IX Subsection "::FromFile"
In the event both of the above don't work for your needs, pull in
hand-crafted metadata from a specified file.
.PP
Dist::Zilla::Plugin::MetaProvides::FromFile
.SH "OPTION SUMMARY"
.IX Header "OPTION SUMMARY"
.SS "inherit_version"
.IX Subsection "inherit_version"
At the time this plugin runs to collect metadata from files,
the mungers won't have run yet to inject custom versions into files in the various
locations.
.PP
If you want the versions reported in the \f(CW\*(C`provides\*(C'\fR list to be consistent with
the ones actually in the files, you will need to use this option in its enabled
state.
.PP
\&\s-1IE:\s0 Generally, if you are using version munging, you \fB\s-1WILL\s0\fR want this flag set
to \f(CW1\fR.
.PP
\fIvalues\fR
.IX Subsection "values"
.IP "\(bu" 4
\&\f(CW\*(Aq0\*(Aq\fR
.Sp
Do not inherit version from \f(CW\*(C`Dist::Zilla\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(Aq1\*(Aq\fR \fB[default]\fR
.Sp
Inherit version from Dist::Zilla
.PP
\&\*(L"inherit_version\*(R" in Dist::Zilla::Role::MetaProvider::Provider
.SS "inherit_missing"
.IX Subsection "inherit_missing"
If for whatever reason you want to actually use the versions found in the modules
where present, and fall back to the value from Dist::Zilla.
.PP
\&\f(CW\*(C`inherit_version\*(C'\fR will need to be turned off (\f(CW0\fR) for this to be effective.
.PP
\fIvalues\fR
.IX Subsection "values"
.IP "\(bu" 4
\&\f(CW\*(Aq0\*(Aq\fR
.Sp
Do not inherit version from \f(CW\*(C`Dist::Zilla\*(C'\fR when one is missing.
.IP "\(bu" 4
\&\f(CW\*(Aq1\*(Aq\fR \fB[default]\fR
.Sp
Inherit version from Dist::Zilla when one is missing.
.PP
\&\*(L"inhert_missing\*(R" in Dist::Zilla::Role::MetaProvider::Provider
.SS "meta_noindex"
.IX Subsection "meta_noindex"
This dictates how to behave when a discovered class is also present in the \f(CW\*(C`no_index\*(C'\fR \s-1META\s0 field.
.PP
\fIvalues\fR
.IX Subsection "values"
.IP "\(bu" 4
\&\f(CW\*(Aq0\*(Aq\fR \fB[default]\fR
.Sp
\&\f(CW\*(C`no_index\*(C'\fR \s-1META\s0 field will be ignored
.IP "\(bu" 4
\&\f(CW\*(Aq1\*(Aq\fR
.Sp
\&\f(CW\*(C`no_index\*(C'\fR \s-1META\s0 field will be recognised and things found in it will cause respective packages
to not be provided in the metadata.
.PP
\&\*(L"meta_noindex\*(R" in Dist::Zilla::Role::MetaProvider::Provider
.SS "file"
.IX Subsection "file"
( Dist::Zilla::Plugin::MetaProvides::FromFile )
.PP
This is a mandatory parameter that points to the file that contains manually
( or otherwise ) crafted metadata to be integrated into your final \s-1META\s0.yml
.PP
File Must exist.
.SS "reader_name"
.IX Subsection "reader_name"
( Dist::Zilla::Plugin::MetaProvides::FromFile )
.PP
This parameter is by default Config::INI::Reader, but it can be in fact anything
that meets the following criteria.
.IP "\(bu" 4
Can be initialized an instance of
.IP "\(bu" 4
has a read_file method on the instance
.IP "\(bu" 4
read_file can take the parameter 'file'
.IP "\(bu" 4
read_file can return a hashref matching the following structure
.Sp
.Vb 4
\&    { \*(AqPackage::Name\*(Aq => {
\&        \*(Aqfile\*(Aq => \*(Aq/path/to/file\*(Aq,
\&        \*(Aqversion\*(Aq => 0.1,
\&    }}
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Kent Fredric <kentnl@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2012 by Kent Fredric.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
